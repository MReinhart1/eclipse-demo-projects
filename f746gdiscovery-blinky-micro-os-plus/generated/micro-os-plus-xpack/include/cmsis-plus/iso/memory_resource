/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2016 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef CMSIS_PLUS_ISO_MEMORY_
#define CMSIS_PLUS_ISO_MEMORY_

#include <cstddef>
#include <cerrno>
#include <cassert>
#include <limits>
#include <memory>

#include <cmsis-plus/iso/system_error>

// ----------------------------------------------------------------------------

namespace os
{
  namespace estd
  {

    // ======================================================================

    class memory_resource;

    bool
    operator== (const memory_resource& a, const memory_resource& b) noexcept;
    bool
    operator!= (const memory_resource& a, const memory_resource& b) noexcept;

    template<typename T>
      class polymorphic_allocator;

    template<typename T1, typename T2>
      bool
      operator== (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

    template<typename T1, typename T2>
      bool
      operator!= (const polymorphic_allocator<T1>& a,
                  const polymorphic_allocator<T2>& b) noexcept;

    // Global memory resources
    memory_resource*
    new_delete_resource () noexcept;

    memory_resource*
    null_memory_resource () noexcept;

    // The default memory resource
    memory_resource*
    set_default_resource (memory_resource* r) noexcept;

    memory_resource*
    get_default_resource () noexcept;

    // ========================================================================

    class memory_resource
    {

    public:

      static constexpr std::size_t max_align = alignof(std::max_align_t);

      virtual
      ~memory_resource ();

      void*
      allocate (std::size_t bytes, std::size_t alignment = max_align);

      void
      deallocate (void* p, std::size_t bytes,
                  std::size_t alignment = max_align);

      bool
      is_equal (memory_resource const & other) const noexcept;

    protected:

      virtual void*
      do_allocate (std::size_t bytes, std::size_t alignment) = 0;

      virtual void
      do_deallocate (void* p, std::size_t bytes, std::size_t alignment) = 0;

      virtual bool
      do_is_equal (memory_resource const &r) const noexcept = 0;
    };

    // ======================================================================

    template<typename T>
      class polymorphic_allocator
      {
      public:

        typedef T value_type;

        polymorphic_allocator () noexcept;

        polymorphic_allocator (memory_resource* r) noexcept;

        polymorphic_allocator (polymorphic_allocator const & a) = default;

        template<typename U>
          polymorphic_allocator (polymorphic_allocator<U> const & other)
              noexcept;

        polymorphic_allocator&
        operator= (polymorphic_allocator const & a) = default;

        value_type*
        allocate (std::size_t size);

        void
        deallocate (value_type* p, std::size_t bytes) noexcept;

        std::size_t
        max_size (void) const noexcept;

        polymorphic_allocator
        select_on_container_copy_construction (void) const noexcept;

        memory_resource*
        resource (void) const noexcept;

      private:

        memory_resource* res_;
      };

  } /* namespace estd */
} /* namespace os */

// ===== Inline & template implementations ====================================

namespace os
{
  namespace estd
  {

    inline void*
    memory_resource::allocate (std::size_t bytes, std::size_t align)
    {
      return do_allocate (bytes, align);
    }

    inline void
    memory_resource::deallocate (void* p, std::size_t bytes, std::size_t align)
    {
      do_deallocate (p, bytes, align);
    }

    inline bool
    memory_resource::is_equal (memory_resource const & other) const noexcept
    {
      return do_is_equal (other);
    }

    template<typename T>
      polymorphic_allocator<T>::polymorphic_allocator () noexcept :
      res_(get_default_resource())
        {
          ;
        }

    template<typename T>
      inline
      polymorphic_allocator<T>::polymorphic_allocator (memory_resource* r) noexcept :
      res_(r)
        {
          ;
        }

    template<typename T>
      template<typename U>
        inline
        polymorphic_allocator<T>::polymorphic_allocator (
            polymorphic_allocator<U> const & other) noexcept :
        res_(other.resource())
          {
            ;
          }

    template<typename T>
      inline typename polymorphic_allocator<T>::value_type*
      polymorphic_allocator<T>::allocate (std::size_t bytes)
      {
        if (bytes > max_size ())
          {
            __throw_system_error (EINVAL,
                                  "polymorphic_allocator<T>::allocate(size_t n)"
                                  " 'n' exceeds maximum supported size");
          }

        return static_cast<value_type*> (res_->allocate (
            bytes * sizeof(value_type), alignof(value_type)));
      }

    template<typename T>
      inline void
      polymorphic_allocator<T>::deallocate (value_type * p, std::size_t bytes) noexcept
      {
        assert(bytes <= max_size());
        res_->deallocate (p, bytes * sizeof(value_type), alignof(value_type));
      }

    template<typename T>
      inline std::size_t
      polymorphic_allocator<T>::max_size (void) const noexcept
      {
        return std::numeric_limits<std::size_t>::max () / sizeof(value_type);
      }

    template<typename T>
      inline polymorphic_allocator<T>
      polymorphic_allocator<T>::select_on_container_copy_construction (
          void) const noexcept
      {
        return polymorphic_allocator ();
      }

    template<typename T>
      inline memory_resource*
      polymorphic_allocator<T>::resource (void) const noexcept
      {
        return res_;
      }

    // ========================================================================

    inline bool
    operator== (memory_resource const & lhs, memory_resource const & rhs) noexcept
    {
      return &lhs == &rhs || lhs.is_equal (rhs);
    }

    inline bool
    operator!= (memory_resource const & lhs, memory_resource const & rhs) noexcept
    {
      return !(lhs == rhs);
    }

    // ========================================================================

    template<typename T, typename U>
      inline bool
      operator== (polymorphic_allocator<T> const & lhs,
                  polymorphic_allocator<U> const & rhs) noexcept
      {
        return *lhs.resource () == *rhs.resource ();
      }

    template<typename T, typename U>
      inline bool
      operator!= (polymorphic_allocator<T> const & lhs,
                  polymorphic_allocator<U> const & rhs) noexcept
      {
        return !(lhs == rhs);
      }

  } /* namespace estd */
} /* namespace os */

// ----------------------------------------------------------------------------

#if 0
// 8.7, memory.resource.adaptor

// 8.7.1, memory.resource.adaptor.overview
template<class _CharAlloc>
class __resource_adaptor_imp : public memory_resource
  {
    using _CTraits = std::allocator_traits<_CharAlloc>;
    static_assert(std::is_same<typename _CTraits::value_type, char>::value
        && std::is_same<typename _CTraits::pointer, char*>::value
        && std::is_same<typename _CTraits::void_pointer, void*>::value, "");

    static const size_t _MaxAlign = alignof(max_align_t);

    using _Alloc = typename _CTraits::template rebind_alloc<
    typename std::aligned_storage<_MaxAlign, _MaxAlign>::type
    >;

    using T = typename _Alloc::value_type;

    _Alloc __alloc_;

  public:
    typedef _CharAlloc allocator_type;

    __resource_adaptor_imp () = default;
    __resource_adaptor_imp (__resource_adaptor_imp const &) = default;
    __resource_adaptor_imp (__resource_adaptor_imp &&) = default;

// 8.7.2, memory.resource.adaptor.ctor

    inline
    explicit
    __resource_adaptor_imp (allocator_type const & __a) :
    __alloc_ (__a)
      {
        ;
      }

    inline
    explicit
    __resource_adaptor_imp (allocator_type && __a) :
    __alloc_ (std::move (__a))
      {
      }

    __resource_adaptor_imp &
    operator= (__resource_adaptor_imp const &) = default;

    inline allocator_type
    get_allocator () const
      {
        return __alloc_;
      }

// 8.7.3, memory.resource.adaptor.mem
  protected:
    virtual void *
    do_allocate (size_t bytes, size_t)
      {
        if (bytes > __max_size ())
          {
            __throw_system_error (EINVAL,

                "resource_adaptor<T>::do_allocate(size_t bytes, size_t align)"
                " 'bytes' exceeds maximum supported size");
          }
        size_t __s = __aligned_allocation_size (bytes, _MaxAlign)
        / _MaxAlign;
        return __alloc_.allocate (__s);
      }

    virtual void
    do_deallocate (void * __p, size_t bytes, size_t)
      {
        assert(bytes <= __max_size ());
        size_t __s = __aligned_allocation_size (bytes, _MaxAlign)
        / _MaxAlign;
        __alloc_.deallocate ((T*) __p, __s);
      }

    virtual bool
    do_is_equal (memory_resource const & __other) const noexcept
      {
        __resource_adaptor_imp const * __p =
        dynamic_cast<__resource_adaptor_imp const *> (&__other);
        return __p ? __alloc_ == __p->__alloc_ : false;
      }

  private:
    inline size_t
    __max_size () const noexcept
      {
        return numeric_limits < size_t > ::max () - _MaxAlign;
      }
  };

template<class _Alloc>
using resource_adaptor = __resource_adaptor_imp<
typename allocator_traits<_Alloc>::template rebind_alloc<char>
>;

#endif
#endif /* CMSIS_PLUS_ISO_MEMORY_ */
